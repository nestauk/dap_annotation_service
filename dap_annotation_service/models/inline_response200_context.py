# coding: utf-8

"""
    Nesta Annotation Service

    DBpedia Spotlight Annotation service for large datasets.  Please refer to the <a href=\"https://github.com/nestauk/dap_dv_backends/tree/dev/src/services/annotation\" target=\"_blank\">docs</a> for a complete guide on how to use the service.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200Context(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'waiting': 'list[InlineResponse200ContextWaiting]',
        'provisioning': 'list[InlineResponse200ContextWaiting]',
        'annotating': 'list[InlineResponse200ContextWaiting]',
        'finished': 'list[InlineResponse200ContextWaiting]',
        'current_workers': 'float',
        'desired_workers': 'float'
    }

    attribute_map = {
        'waiting': 'waiting',
        'provisioning': 'provisioning',
        'annotating': 'annotating',
        'finished': 'finished',
        'current_workers': 'currentWorkers',
        'desired_workers': 'desiredWorkers'
    }

    def __init__(self, waiting=None, provisioning=None, annotating=None, finished=None, current_workers=None, desired_workers=None):  # noqa: E501
        """InlineResponse200Context - a model defined in Swagger"""  # noqa: E501
        self._waiting = None
        self._provisioning = None
        self._annotating = None
        self._finished = None
        self._current_workers = None
        self._desired_workers = None
        self.discriminator = None
        if waiting is not None:
            self.waiting = waiting
        if provisioning is not None:
            self.provisioning = provisioning
        if annotating is not None:
            self.annotating = annotating
        if finished is not None:
            self.finished = finished
        if current_workers is not None:
            self.current_workers = current_workers
        if desired_workers is not None:
            self.desired_workers = desired_workers

    @property
    def waiting(self):
        """Gets the waiting of this InlineResponse200Context.  # noqa: E501


        :return: The waiting of this InlineResponse200Context.  # noqa: E501
        :rtype: list[InlineResponse200ContextWaiting]
        """
        return self._waiting

    @waiting.setter
    def waiting(self, waiting):
        """Sets the waiting of this InlineResponse200Context.


        :param waiting: The waiting of this InlineResponse200Context.  # noqa: E501
        :type: list[InlineResponse200ContextWaiting]
        """

        self._waiting = waiting

    @property
    def provisioning(self):
        """Gets the provisioning of this InlineResponse200Context.  # noqa: E501


        :return: The provisioning of this InlineResponse200Context.  # noqa: E501
        :rtype: list[InlineResponse200ContextWaiting]
        """
        return self._provisioning

    @provisioning.setter
    def provisioning(self, provisioning):
        """Sets the provisioning of this InlineResponse200Context.


        :param provisioning: The provisioning of this InlineResponse200Context.  # noqa: E501
        :type: list[InlineResponse200ContextWaiting]
        """

        self._provisioning = provisioning

    @property
    def annotating(self):
        """Gets the annotating of this InlineResponse200Context.  # noqa: E501


        :return: The annotating of this InlineResponse200Context.  # noqa: E501
        :rtype: list[InlineResponse200ContextWaiting]
        """
        return self._annotating

    @annotating.setter
    def annotating(self, annotating):
        """Sets the annotating of this InlineResponse200Context.


        :param annotating: The annotating of this InlineResponse200Context.  # noqa: E501
        :type: list[InlineResponse200ContextWaiting]
        """

        self._annotating = annotating

    @property
    def finished(self):
        """Gets the finished of this InlineResponse200Context.  # noqa: E501


        :return: The finished of this InlineResponse200Context.  # noqa: E501
        :rtype: list[InlineResponse200ContextWaiting]
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this InlineResponse200Context.


        :param finished: The finished of this InlineResponse200Context.  # noqa: E501
        :type: list[InlineResponse200ContextWaiting]
        """

        self._finished = finished

    @property
    def current_workers(self):
        """Gets the current_workers of this InlineResponse200Context.  # noqa: E501


        :return: The current_workers of this InlineResponse200Context.  # noqa: E501
        :rtype: float
        """
        return self._current_workers

    @current_workers.setter
    def current_workers(self, current_workers):
        """Sets the current_workers of this InlineResponse200Context.


        :param current_workers: The current_workers of this InlineResponse200Context.  # noqa: E501
        :type: float
        """

        self._current_workers = current_workers

    @property
    def desired_workers(self):
        """Gets the desired_workers of this InlineResponse200Context.  # noqa: E501


        :return: The desired_workers of this InlineResponse200Context.  # noqa: E501
        :rtype: float
        """
        return self._desired_workers

    @desired_workers.setter
    def desired_workers(self, desired_workers):
        """Sets the desired_workers of this InlineResponse200Context.


        :param desired_workers: The desired_workers of this InlineResponse200Context.  # noqa: E501
        :type: float
        """

        self._desired_workers = desired_workers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200Context, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200Context):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
