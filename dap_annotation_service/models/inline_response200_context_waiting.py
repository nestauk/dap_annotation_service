# coding: utf-8

"""
    Nesta Annotation Service

    DBpedia Spotlight Annotation service for large datasets.  Please refer to the <a href=\"https://github.com/nestauk/dap_dv_backends/tree/dev/src/services/annotation\" target=\"_blank\">docs</a> for a complete guide on how to use the service.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200ContextWaiting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'workers': 'float',
        'domain': 'str',
        'index': 'str',
        'field': 'str',
        'new_field': 'str',
        'annotation_endpoint': 'str',
        'type': 'str',
        'include_meta_data': 'bool',
        'progress': 'InlineResponse200ContextProgress'
    }

    attribute_map = {
        'id': 'id',
        'workers': 'workers',
        'domain': 'domain',
        'index': 'index',
        'field': 'field',
        'new_field': 'newField',
        'annotation_endpoint': 'annotationEndpoint',
        'type': 'type',
        'include_meta_data': 'includeMetaData',
        'progress': 'progress'
    }

    def __init__(self, id=None, workers=None, domain=None, index=None, field=None, new_field=None, annotation_endpoint=None, type=None, include_meta_data=None, progress=None):  # noqa: E501
        """InlineResponse200ContextWaiting - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._workers = None
        self._domain = None
        self._index = None
        self._field = None
        self._new_field = None
        self._annotation_endpoint = None
        self._type = None
        self._include_meta_data = None
        self._progress = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if workers is not None:
            self.workers = workers
        if domain is not None:
            self.domain = domain
        if index is not None:
            self.index = index
        if field is not None:
            self.field = field
        if new_field is not None:
            self.new_field = new_field
        if annotation_endpoint is not None:
            self.annotation_endpoint = annotation_endpoint
        if type is not None:
            self.type = type
        if include_meta_data is not None:
            self.include_meta_data = include_meta_data
        if progress is not None:
            self.progress = progress

    @property
    def id(self):
        """Gets the id of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The id of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200ContextWaiting.


        :param id: The id of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def workers(self):
        """Gets the workers of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The workers of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: float
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this InlineResponse200ContextWaiting.


        :param workers: The workers of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: float
        """

        self._workers = workers

    @property
    def domain(self):
        """Gets the domain of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The domain of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this InlineResponse200ContextWaiting.


        :param domain: The domain of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def index(self):
        """Gets the index of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The index of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this InlineResponse200ContextWaiting.


        :param index: The index of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def field(self):
        """Gets the field of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The field of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this InlineResponse200ContextWaiting.


        :param field: The field of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def new_field(self):
        """Gets the new_field of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The new_field of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: str
        """
        return self._new_field

    @new_field.setter
    def new_field(self, new_field):
        """Sets the new_field of this InlineResponse200ContextWaiting.


        :param new_field: The new_field of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: str
        """

        self._new_field = new_field

    @property
    def annotation_endpoint(self):
        """Gets the annotation_endpoint of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The annotation_endpoint of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: str
        """
        return self._annotation_endpoint

    @annotation_endpoint.setter
    def annotation_endpoint(self, annotation_endpoint):
        """Sets the annotation_endpoint of this InlineResponse200ContextWaiting.


        :param annotation_endpoint: The annotation_endpoint of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: str
        """

        self._annotation_endpoint = annotation_endpoint

    @property
    def type(self):
        """Gets the type of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The type of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200ContextWaiting.


        :param type: The type of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def include_meta_data(self):
        """Gets the include_meta_data of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The include_meta_data of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: bool
        """
        return self._include_meta_data

    @include_meta_data.setter
    def include_meta_data(self, include_meta_data):
        """Sets the include_meta_data of this InlineResponse200ContextWaiting.


        :param include_meta_data: The include_meta_data of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: bool
        """

        self._include_meta_data = include_meta_data

    @property
    def progress(self):
        """Gets the progress of this InlineResponse200ContextWaiting.  # noqa: E501


        :return: The progress of this InlineResponse200ContextWaiting.  # noqa: E501
        :rtype: InlineResponse200ContextProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this InlineResponse200ContextWaiting.


        :param progress: The progress of this InlineResponse200ContextWaiting.  # noqa: E501
        :type: InlineResponse200ContextProgress
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200ContextWaiting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200ContextWaiting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
